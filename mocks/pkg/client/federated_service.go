// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/client/federated_service.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/vmware/hamlet/api/types/v1alpha1"
)

// MockFederatedServiceObserver is a mock of FederatedServiceObserver interface
type MockFederatedServiceObserver struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedServiceObserverMockRecorder
}

// MockFederatedServiceObserverMockRecorder is the mock recorder for MockFederatedServiceObserver
type MockFederatedServiceObserverMockRecorder struct {
	mock *MockFederatedServiceObserver
}

// NewMockFederatedServiceObserver creates a new mock instance
func NewMockFederatedServiceObserver(ctrl *gomock.Controller) *MockFederatedServiceObserver {
	mock := &MockFederatedServiceObserver{ctrl: ctrl}
	mock.recorder = &MockFederatedServiceObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederatedServiceObserver) EXPECT() *MockFederatedServiceObserverMockRecorder {
	return m.recorder
}

// OnCreate mocks base method
func (m *MockFederatedServiceObserver) OnCreate(arg0 *v1alpha1.FederatedService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCreate indicates an expected call of OnCreate
func (mr *MockFederatedServiceObserverMockRecorder) OnCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCreate", reflect.TypeOf((*MockFederatedServiceObserver)(nil).OnCreate), arg0)
}

// OnUpdate mocks base method
func (m *MockFederatedServiceObserver) OnUpdate(arg0 *v1alpha1.FederatedService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnUpdate indicates an expected call of OnUpdate
func (mr *MockFederatedServiceObserverMockRecorder) OnUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdate", reflect.TypeOf((*MockFederatedServiceObserver)(nil).OnUpdate), arg0)
}

// OnDelete mocks base method
func (m *MockFederatedServiceObserver) OnDelete(arg0 *v1alpha1.FederatedService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnDelete indicates an expected call of OnDelete
func (mr *MockFederatedServiceObserverMockRecorder) OnDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDelete", reflect.TypeOf((*MockFederatedServiceObserver)(nil).OnDelete), arg0)
}
