// Code generated by MockGen. DO NOT EDIT.
// Source: ../../api/resourcediscovery/v1alpha1/resource_discovery.pb.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/vmware/hamlet/api/resourcediscovery/v1alpha1"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDiscoveryServiceClient is a mock of DiscoveryServiceClient interface
type MockDiscoveryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryServiceClientMockRecorder
}

// MockDiscoveryServiceClientMockRecorder is the mock recorder for MockDiscoveryServiceClient
type MockDiscoveryServiceClientMockRecorder struct {
	mock *MockDiscoveryServiceClient
}

// NewMockDiscoveryServiceClient creates a new mock instance
func NewMockDiscoveryServiceClient(ctrl *gomock.Controller) *MockDiscoveryServiceClient {
	mock := &MockDiscoveryServiceClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryServiceClient) EXPECT() *MockDiscoveryServiceClientMockRecorder {
	return m.recorder
}

// EstablishStream mocks base method
func (m *MockDiscoveryServiceClient) EstablishStream(ctx context.Context, opts ...grpc.CallOption) (v1alpha1.DiscoveryService_EstablishStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstablishStream", varargs...)
	ret0, _ := ret[0].(v1alpha1.DiscoveryService_EstablishStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstablishStream indicates an expected call of EstablishStream
func (mr *MockDiscoveryServiceClientMockRecorder) EstablishStream(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstablishStream", reflect.TypeOf((*MockDiscoveryServiceClient)(nil).EstablishStream), varargs...)
}

// MockDiscoveryService_EstablishStreamClient is a mock of DiscoveryService_EstablishStreamClient interface
type MockDiscoveryService_EstablishStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_EstablishStreamClientMockRecorder
}

// MockDiscoveryService_EstablishStreamClientMockRecorder is the mock recorder for MockDiscoveryService_EstablishStreamClient
type MockDiscoveryService_EstablishStreamClientMockRecorder struct {
	mock *MockDiscoveryService_EstablishStreamClient
}

// NewMockDiscoveryService_EstablishStreamClient creates a new mock instance
func NewMockDiscoveryService_EstablishStreamClient(ctrl *gomock.Controller) *MockDiscoveryService_EstablishStreamClient {
	mock := &MockDiscoveryService_EstablishStreamClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_EstablishStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_EstablishStreamClient) EXPECT() *MockDiscoveryService_EstablishStreamClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockDiscoveryService_EstablishStreamClient) Send(arg0 *v1alpha1.StreamRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockDiscoveryService_EstablishStreamClient) Recv() (*v1alpha1.StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).Recv))
}

// Header mocks base method
func (m *MockDiscoveryService_EstablishStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockDiscoveryService_EstablishStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockDiscoveryService_EstablishStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockDiscoveryService_EstablishStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockDiscoveryService_EstablishStreamClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockDiscoveryService_EstablishStreamClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_EstablishStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_EstablishStreamClient)(nil).RecvMsg), m)
}

// MockDiscoveryServiceServer is a mock of DiscoveryServiceServer interface
type MockDiscoveryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryServiceServerMockRecorder
}

// MockDiscoveryServiceServerMockRecorder is the mock recorder for MockDiscoveryServiceServer
type MockDiscoveryServiceServerMockRecorder struct {
	mock *MockDiscoveryServiceServer
}

// NewMockDiscoveryServiceServer creates a new mock instance
func NewMockDiscoveryServiceServer(ctrl *gomock.Controller) *MockDiscoveryServiceServer {
	mock := &MockDiscoveryServiceServer{ctrl: ctrl}
	mock.recorder = &MockDiscoveryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryServiceServer) EXPECT() *MockDiscoveryServiceServerMockRecorder {
	return m.recorder
}

// EstablishStream mocks base method
func (m *MockDiscoveryServiceServer) EstablishStream(arg0 v1alpha1.DiscoveryService_EstablishStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstablishStream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EstablishStream indicates an expected call of EstablishStream
func (mr *MockDiscoveryServiceServerMockRecorder) EstablishStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstablishStream", reflect.TypeOf((*MockDiscoveryServiceServer)(nil).EstablishStream), arg0)
}

// MockDiscoveryService_EstablishStreamServer is a mock of DiscoveryService_EstablishStreamServer interface
type MockDiscoveryService_EstablishStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryService_EstablishStreamServerMockRecorder
}

// MockDiscoveryService_EstablishStreamServerMockRecorder is the mock recorder for MockDiscoveryService_EstablishStreamServer
type MockDiscoveryService_EstablishStreamServerMockRecorder struct {
	mock *MockDiscoveryService_EstablishStreamServer
}

// NewMockDiscoveryService_EstablishStreamServer creates a new mock instance
func NewMockDiscoveryService_EstablishStreamServer(ctrl *gomock.Controller) *MockDiscoveryService_EstablishStreamServer {
	mock := &MockDiscoveryService_EstablishStreamServer{ctrl: ctrl}
	mock.recorder = &MockDiscoveryService_EstablishStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryService_EstablishStreamServer) EXPECT() *MockDiscoveryService_EstablishStreamServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockDiscoveryService_EstablishStreamServer) Send(arg0 *v1alpha1.StreamResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).Send), arg0)
}

// Recv mocks base method
func (m *MockDiscoveryService_EstablishStreamServer) Recv() (*v1alpha1.StreamRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1alpha1.StreamRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).Recv))
}

// SetHeader mocks base method
func (m *MockDiscoveryService_EstablishStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockDiscoveryService_EstablishStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockDiscoveryService_EstablishStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockDiscoveryService_EstablishStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockDiscoveryService_EstablishStreamServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockDiscoveryService_EstablishStreamServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDiscoveryService_EstablishStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDiscoveryService_EstablishStreamServer)(nil).RecvMsg), m)
}
